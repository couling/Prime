.TH PRIME 1 "September 2013" "Philip Couling" "User Commands" 
.SH NAME
prime prime-slow prime-64 prime-gmp
.SH SYNOPSIS
prime [options ...]
.br
prime-slow [options ...]
.br
prime-64 [options ...]
.br
prime-gmp [options ...]
.SH DESCRIPTION
Generates prime numbers very rapidly.  The current version is written in c.

.B prime
is the default prime number generator (this will be set up using alternatives but currently is a simple symlink in the package)

.B prime-slow
is a very simplistic generator which uses 64 bit signed integers as primes.  The main purpose of this program is for verification.  The code is simple to avoid any chance of bugs and so the results are very trustworty. It attempts to factor each odd number by every prime up to the square root.  Note that many of the options listed here do not affect prime-slow.

.B prime-64
is a very fast generator which processes potential primes in large blocks (default 1 billion - 1,000,000,000).  This is extremely fast and can easily fill hard drives with prime numbers at the end of its 64 bit signed integer range.

.B prime-gmp
is a little slower than prime-64 but is based on the same technique. The main difference is that all operations are carried out using low level libgmp functions so that primes are 128 bit.  The main limitation to the maximum prime this can generate is based on the size of initialization.  When using self initialisation, this is generated in a single threaded fassion and in process memory.  As an alternative you can generate a very large initialisation file which can then be memory mapped. See
.B \-i 
flag
\.
.SH OPTIONS
.TP
.B \-I \-\-create\-init\-file
Quick way to create an init file.  Equivalent to -bfs 3.
.TP 
.B \-a \-\-text\-out
Sets the output file mode to ASKII text.  Each prime number will be written on its own line.  This is default so is only really there to override the \-b or \-B flag.  Which ever of them is last will take precident.
.TP 
.B \-b \-\-binary\-out
Sets the output file mode to binary.  This is primarily used to generate initialisation files for later use with the \-i flag.  Each prime will be written as a binary integer in whatever format is native to the program.  For prime-64 this will be a 64 bit signed integer - the endianess will depend of the system architechture.  For prime-gmp this will prodce primes made up of multiple architecture specific integers (either 64 bit or 32 bit).  These integers are placed in low to high order of segnificance (little endian) even if this does not match the endianness of the system.  This means that the order of bytes (low to high) may be something like: 4,3,2,1,8,7,6,5,12,11,10,9,16,15,14,13.  prime-gmp does NOT use variable length numbers, it always uses 128 bit integers (2 gmp "limbs" on 64 bit systems, 4 on 32 bit systems).
.TP
.B \-B \-\-compressed\-out 
This will never be implemented for prime-slow.  Sets the output to a higly compressed format.  Each byte represents 8 odd numbers starting with the lowest in the requested range.  The low segnificant bit represents the smallest up to the high segnificance bit representing the largest.  Each bit therefore represents 1: is prime or 0: is not prime.  This is by far the most compressed format and is also the fastest to generate.
.TP 
.B \-c size  \-\-chunk-size size
Sets the chunk size to be processed.  This should be larg enough to improve performance but not so large that requires too much RAM.  Each thread will require the chunksize/16 bytes of RAM to function. Suffix this with K,M,G,T to multiply by one thousand, million, billion or trillion respectivly.  The default chunk size is 1G (1,000,000,000 [62,500,000 bytes of RAM]).  

Note that the chunk size will also be used to break up the files if the
.TP
.B \-d \-\-dir
Specifies the directory to place the output files.  Note that specifying an absolute path in the file name (one starting with /) will override this.  By default output files are placed in the current working directory.  See  
.TP 
.B \-e num  \-\-end num
Sets the end of the search range.  Suffix this with K,M,G,T to multiply by one thousand, million, billion or trillion respectivly.  The choice of suffix will affect the default naming convention of the output file.
.B -f --file
switch is used (it is by default).  As a result the suffix will also affect the file name format.
.B \-n
for name patterns.
.TP
.B \-f \-\-multi\-file
Sets prime to write to files.  Each chunk will be written to its own file.  This is recommended when multithreading to reduce the contention between threads.
.TP
.B \-F \-\-single\-file
Sets prime to write to a single file instead of stdout. All chunks will be written in order which will slow the program down.  It is better to use \-\-multi\-file if at all possible.
.TP
.B \-i \-\-create\-init\-file    
Equivalent to \-bfs 3 \-n init\-%9e9OG.dat
.TP
.B \-k \-\-clobber Allow overwriting of existing files.  By default prime will cause the job to abort.
.TP
.B \-l \-\-low\-prime\-max 
Set the size of the largest "low prime".  This is 19 by default and has a hard coded max of 23 due to memory constraints.  Low primes require a bitmap to be created and shared between the threads.  The size of the bitmap is the product of every low prime (excluding 2), so the default "19" causes a bitmap of 3*5*7*11*13*17*19 = 4849845 = 4.63MiB.  The max of 23 requires 2.18GiB.
.TP
.B \-n \-\-file\-name Sets the name pattern for the output file name.  This recognises an escape character "%" followed by one of the following:
    %%        a single %
    %<i>e<j>o The start value divided by 10^j padded to atleast i digits.  Eg: %12e6om is the start value in millions padded to 12 digits.
    %<i>e<j>O The end value divided by 10^j padded to atleast i digits.  Eg: %12e6om is the start value in millions padded to 12 digits.
    %x        The thread number
    %t        The current time
    %d        The current date

The default file name depends on which suffixes have been used in \-s \-e and \-c flags.  Based on the lowest of these three, one of the following defaults will be used for the file name:
    prime.%9e9oG-%9e9OG.txt    G  or larger suffix
    prime.%12e6oM-%12e6OM.txt  M  suffix
    prime.%15e3oK-%15e3OK.txt  K  suffix
    prime.%18e0o-%18e0O.txt    no suffix
.TP
.B \-p \-\-use\-stdout
Writes all output to the stdout instead of files.  Like with \-f each chunk will be written in order forcing threads to wate for each other.
.TP
.b \-P \-\-post\-process command
Pushes all content through the specified command.  To pass through arugments then wrap the args with quotes along with the command. Eg:
    prime \-\-post\-process 'gzip -9'
.TP
.B \-q \-\-quiet
Switchs off all writing to the stderr except for errors.  Normally prime will write its progress, this flag turns that off.
.B \-q
) switchs.
.TP
.B \-s num \-\-start num
Sets the start of the search range. Suffix this with K,M,G,T to multiply by one thousand, million, billion or trillion respectivly.  The choice of suffix will affect the default naming convention of the output file.
.TP
.B \-x n  \-\-threads\ n
Specifies the number of threads to use (default 1).
.SH KNOWN ISSUES
Initialisation files have been removed as it was found that IO rates caused them to run very slowly.  These are planned to be re-introduced in a later version but using a different system.  The option to generate an initialisation file has been left in, but the files it generates will not be compatible with any future initialisation feature.
.SH EXAMPLES
.TP
Simplest use case.  Generate every primme up to 1 billion in a file in the current working directory (single threaded).
.TP
Run single threaded writing every prime number up to 100 billion (100,000,000,000)
prime \-\-end 100G \-\-use-stdout > result.txt
.TP
Run multi threaded to generate every prime up to 1 trillion (1,000,000,000,000) writing compressed format.
.SH AUTHOR(S)
Philip Couling
